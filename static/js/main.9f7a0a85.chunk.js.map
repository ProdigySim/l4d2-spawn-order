{"version":3,"sources":["utils/assertDefined.ts","models/SIClass.ts","redux/isClassOverLimit.ts","redux/determineNextSpawn.ts","redux/getPlayers.ts","redux/playerState.ts","redux/gameStateSlice.ts","redux/getNextSpawns.ts","PlayerControl.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["assertDefined","value","explanation","console","assert","undefined","SIClass","getSIName","siClass","SIDominators","Smoker","Hunter","Jockey","Charger","allStandardSIOrdered","Boomer","Spitter","isClassOverLimit","players","Witch","Tank","classCounts","reduce","acc","next","Common","isDominator","map","c","determineNextSpawn","gameState","player","highestTimestamp","targetClass","defaultClass","slice","rotateSIListTo","spawnSeed","lastSpawnedAsClassTimestamp","classTimestamps","warn","getPlayers","createSelector","state","orderedPlayers","playersById","orderedIds","byId","i","playerId","rndSeed","Math","floor","random","createSlice","name","initialState","availablePlayerNames","curTime","reducers","addPlayer","id","spawnState","vendNewPlayer","arr","length","pop","targetIdx","splice","consumeRandomItem","push","removePlayer","setSpawnSeed","action","payload","rerollSpawnSeed","spawnPlayer","nextSI","killPlayer","reducer","gameStateActions","actions","populateGame","createAsyncThunk","playerCount","a","dispatch","getState","getNextSpawns","Object","fromEntries","p","PlayerControl","nextSpawn","useSelector","useDispatch","stateToggle","className","onClick","App","seed","useEffect","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","store","configureStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9f7a0a85.chunk.js","sourcesContent":["export default function assertDefined(value: unknown, explanation: string): asserts value {\r\n  console.assert(value !== undefined, explanation);\r\n}","enum SIClass {\r\n  Common=0,\r\n  Smoker,\r\n  Boomer,\r\n  Hunter,\r\n  Spitter,\r\n  Jockey,\r\n  Charger,\r\n  Witch,\r\n  Tank,\r\n};\r\n\r\nexport function getSIName(siClass: SIClass): string {\r\n  return SIClass[siClass];\r\n}\r\n\r\nexport function isDominator(siClass: SIClass): boolean {\r\n  switch(siClass) {\r\n    case SIClass.Smoker:\r\n    case SIClass.Hunter:\r\n    case SIClass.Jockey:\r\n    case SIClass.Charger:\r\n        return true;\r\n    default:\r\n      return false;\r\n  }\r\n}\r\n\r\nexport const SIDominators = [SIClass.Smoker, SIClass.Hunter, SIClass.Jockey, SIClass.Charger] as const;\r\nexport const allStandardSIOrdered = [\r\n  SIClass.Smoker,\r\n  SIClass.Boomer,\r\n  SIClass.Hunter,\r\n  SIClass.Spitter,\r\n  SIClass.Jockey,\r\n  SIClass.Charger,\r\n] as const;\r\n\r\n/**\r\n * Returns a list of all SI that starts at the given SI and wraps around the standard list in order.\r\n * @param siClass The SI class you want the list to start on\r\n */\r\nexport function rotateSIListTo(siClass: SIClass) {\r\n  return [\r\n    ...allStandardSIOrdered.slice(siClass-1),\r\n    ...allStandardSIOrdered.slice(0, siClass),\r\n  ];\r\n}\r\nexport default SIClass;","import SIClass, { isDominator, SIDominators } from \"../models/SIClass\";\r\nimport { PlayerState } from \"./playerState\";\r\n\r\n// Future: Add support for custom class limits via cvar (e.g. no spitter)\r\nexport default function isClassOverLimit(players: readonly PlayerState[], siClass: SIClass) {\r\n  if ( siClass === SIClass.Witch || siClass === SIClass.Tank) {\r\n    return false;\r\n  }\r\n\r\n  const classLimit = 1; // read this from cvar state\r\n\r\n  // Count SI classes of all alive & ghost infected\r\n  const classCounts = players\r\n    .reduce<Record<SIClass, number>>((acc, next) => {\r\n      if(next.siClass > SIClass.Common && next.siClass < SIClass.Witch) {\r\n        ++acc[next.siClass]\r\n      }\r\n      return acc;\r\n    }, [0,0,0,0,0,0,0,0,0,0]);\r\n\r\n    if (classCounts[siClass] >= classLimit) {\r\n      return true;\r\n    }\r\n    if (!isDominator(siClass)) {\r\n      // Non-dominators are always allowed.\r\n      return false;\r\n    }\r\n    const dominatorCount = SIDominators.map(c => classCounts[c]).reduce((acc, next) => acc + next, 0);\r\n    // 3 or more dominators, don't allow additional dominators.\r\n    // This is hard-coded in game logic... so we don't get cvar control.\r\n    return dominatorCount > 2;\r\n}","import SIClass, { rotateSIListTo } from \"../models/SIClass\";\r\nimport isClassOverLimit from \"./isClassOverLimit\";\r\nimport { PlayerState } from \"./playerState\";\r\n\r\nexport default function determineNextSpawn(gameState: { players: readonly PlayerState[], spawnSeed: SIClass }, player: PlayerState) {\r\n  let highestTimestamp = 99999;\r\n  let targetClass = SIClass.Hunter;\r\n  let defaultClass = true;\r\n  for(const siClass of rotateSIListTo(gameState.spawnSeed)) {\r\n    const lastSpawnedAsClassTimestamp = player.classTimestamps[siClass];\r\n    // Double check: conflicting timestamps take which SI? Should be the first one found...\r\n    if (lastSpawnedAsClassTimestamp < highestTimestamp) {\r\n      if(!isClassOverLimit(gameState.players, siClass)) {\r\n        targetClass = siClass;\r\n        highestTimestamp = lastSpawnedAsClassTimestamp;\r\n        defaultClass = false;\r\n      }\r\n    }\r\n  }\r\n  if (defaultClass) {\r\n    console.warn('Next spawn defaulted to Hunter because of no available options!!!');\r\n  }\r\n  return targetClass;\r\n}\r\n","import { createSelector } from \"@reduxjs/toolkit\";\r\nimport { GameState } from \"./gameStateSlice\";\r\n\r\nconst getPlayers = createSelector(\r\n  (state: GameState) => state.orderedPlayers,\r\n  (state: GameState) => state.playersById,\r\n  (orderedIds, byId) => orderedIds.map((i) => byId[i]),\r\n);\r\n\r\nexport default getPlayers;","import SIClass from \"../models/SIClass\";\r\n\r\nexport const PlayerNames: ReadonlyArray<string> = [\r\n  'purple',\r\n  'mason',\r\n  'killatoy',\r\n  'breaker',\r\n  'ProdigySim',\r\n  'CanadaRox',\r\n  'grizz',\r\n  'RailsBarlow',\r\n  'LuckyLock',\r\n  'qeo',\r\n  'Chd',\r\n  'kimchi',\r\n  'flyby',\r\n  'dectheone',\r\n  'IcyInferno',\r\n  'n1njaaa',\r\n  'jcb',\r\n  'alexi21',\r\n  'SirPlease',\r\n  'vex',\r\n  'vanille',\r\n  'BRBOWLFEXIN`',\r\n];\r\nexport interface PlayerState {\r\n  id: number;\r\n  name: string;\r\n  classTimestamps: Record<SIClass, number>;\r\n  siClass: SIClass;\r\n  spawnState: 'dead' | 'alive' | 'ghost';\r\n}\r\n\r\n\r\nlet playerId = 1;\r\nexport const vendNewPlayer = (name: string): PlayerState => ({\r\n    id: playerId++,\r\n    name,\r\n    classTimestamps: [0,0,0,0,0,0,0,0,0],\r\n    siClass: SIClass.Common, // Default to non-special until in ghost state (spawned).\r\n    spawnState: 'dead',\r\n});\r\n","import { createAsyncThunk, createSlice, PayloadAction, Slice } from \"@reduxjs/toolkit\";\r\nimport SIClass from \"../models/SIClass\";\r\nimport assertDefined from \"../utils/assertDefined\";\r\nimport determineNextSpawn from \"./determineNextSpawn\";\r\nimport getPlayers from \"./getPlayers\";\r\nimport { PlayerNames, PlayerState, vendNewPlayer } from './playerState';\r\n\r\nfunction rndSeed(): SIClass {\r\n  return Math.floor(Math.random() * 6) + 1;\r\n}\r\nfunction consumeRandomItem<T>(arr:T[]): T | undefined {\r\n  if(arr.length < 2) {\r\n    // 0: return undefined\r\n    // 1: return first item.\r\n    return arr.pop();\r\n  }\r\n  const targetIdx = Math.floor(Math.random() * arr.length);\r\n  return arr.splice(targetIdx)[0];\r\n}\r\nconst slice = createSlice({\r\n  name: 'GameState',\r\n  initialState: {\r\n    availablePlayerNames: PlayerNames,\r\n    playersById: {} as Record<number, PlayerState>,\r\n    orderedPlayers: [] as number[],\r\n    spawnSeed: rndSeed(),\r\n    curTime: 0, // Fake game clock, we will always increment this on any gamestate advancing action.\r\n  },\r\n  reducers: {\r\n    addPlayer(state) {\r\n      const name = consumeRandomItem(state.availablePlayerNames) ?? 'PLAYER';\r\n      const player = vendNewPlayer(name);\r\n      state.playersById[player.id] = player;\r\n      state.orderedPlayers.push(player.id);\r\n    },\r\n    removePlayer(state) {\r\n      const playerId = state.orderedPlayers.pop();\r\n      assertDefined(playerId, 'No players found to remove');\r\n      const player = state.playersById[playerId];\r\n      delete state.playersById[playerId];\r\n      state.availablePlayerNames.push(player.name);\r\n    },\r\n    setSpawnSeed(state, action: PayloadAction<number>) {\r\n      console.assert(action.payload > 0 && action.payload < 7, \"Spawn seed out of bounds.\");\r\n      state.spawnSeed = action.payload;\r\n    },\r\n    rerollSpawnSeed(state) {\r\n      state.spawnSeed = rndSeed();\r\n    },\r\n    spawnPlayer(state, action: PayloadAction<number>) {\r\n      const player = state.playersById[action.payload];\r\n      assertDefined(player, `Couldn't find player ${action.payload} to spawn.`);\r\n      console.assert(player.spawnState === 'dead', `Player ${action.payload} is not dead`);\r\n      const nextSI = determineNextSpawn({ players: getPlayers(state), spawnSeed: state.spawnSeed }, player);\r\n      player.siClass = nextSI;\r\n      player.classTimestamps[nextSI] = ++state.curTime;\r\n      player.spawnState = 'ghost';\r\n    },\r\n    killPlayer(state, action: PayloadAction<number>) {\r\n      const player = state.playersById[action.payload];\r\n      assertDefined(player, `Couldn't find player ${action.payload} to spawn.`);\r\n      ++state.curTime\r\n      // SI Class stays the same while dead\r\n      player.spawnState = 'dead';\r\n    }\r\n  }\r\n});\r\n\r\nexport const reducer = slice.reducer;\r\n\r\nexport const gameStateActions = {\r\n  ...slice.actions,\r\n  populateGame: createAsyncThunk(\r\n    'gameState/addNewPlayerAndSpawn',\r\n    async (playerCount: number, { dispatch, getState }) => {\r\n      while(playerCount--) {\r\n        await dispatch(slice.actions.addPlayer());\r\n      }\r\n      const players = getPlayers(getState() as GameState);\r\n      for (const player of players) {\r\n        await dispatch(slice.actions.spawnPlayer(player.id));\r\n      }\r\n    })\r\n};\r\n\r\n\r\n\r\nexport type GameState = typeof slice extends Slice<infer U, any> ? U : never;\r\n","import { createSelector } from \"reselect\";\r\nimport SIClass from \"../models/SIClass\";\r\nimport determineNextSpawn from \"./determineNextSpawn\";\r\nimport { GameState } from \"./gameStateSlice\";\r\nimport getPlayers from \"./getPlayers\";\r\n\r\n\r\nconst getNextSpawns = createSelector(\r\n  getPlayers,\r\n  (state: GameState) => state.spawnSeed,\r\n  (players, spawnSeed) => Object.fromEntries(\r\n    players.map((p) => [p.id, determineNextSpawn({ players, spawnSeed }, p)] as const),\r\n  ) as Record<number, SIClass>,\r\n);\r\n\r\nexport default getNextSpawns;","import { useDispatch, useSelector } from \"react-redux\";\r\nimport { getSIName } from \"./models/SIClass\";\r\nimport { gameStateActions } from \"./redux/gameStateSlice\";\r\nimport getNextSpawns from \"./redux/getNextSpawns\";\r\nimport { PlayerState } from \"./redux/playerState\";\r\n\r\n\r\n\r\nexport default function PlayerControl({ player }: { player: PlayerState}) {\r\n  const nextSpawn = useSelector(getNextSpawns)[player.id];\r\n  const dispatch = useDispatch();\r\n\r\n  const stateToggle = player.spawnState === 'dead'\r\n    ? () => dispatch(gameStateActions.spawnPlayer(player.id))\r\n    : () => dispatch(gameStateActions.killPlayer(player.id));\r\n  return <div>\r\n    { \r\n      player.spawnState === 'dead'\r\n      ? (<span>{ player.name } is Dead. Their next spawn will be: {getSIName(nextSpawn)} ({nextSpawn})</span>)\r\n      : (<span>{ player.name } is spawned as a {getSIName(player.siClass)} ({player.siClass}).</span>)\r\n    }\r\n    { ' ' }\r\n    <button \r\n      className='playerSpawnStateToggle' \r\n      onClick={stateToggle}\r\n    >{player.spawnState === 'dead' ? 'Spawn' : 'Kill'}</button>\r\n  </div>\r\n}","import React, { useEffect } from 'react';\nimport './App.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { GameState, gameStateActions } from './redux/gameStateSlice';\nimport getPlayers from './redux/getPlayers';\nimport { getSIName } from './models/SIClass';\nimport PlayerControl from './PlayerControl';\n\nfunction App() {\n  const seed = useSelector((state: GameState) => state.spawnSeed);\n  const players = useSelector(getPlayers);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(gameStateActions.populateGame(4));\n  }, [dispatch])\n  return (\n    <div className=\"App\">\n      <div>\n        <h1>Spawn Simulator</h1>\n      </div>\n      <div>\n        <p>Current spawn seed is: {getSIName(seed)} ({seed}).</p>\n        <button>New Game (new seed)</button>\n        <button>New Round (same seed)</button>\n        {\n          players.map((p) => (\n            <PlayerControl key={p.id} player={p} />\n          ))\n        }\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\nimport { configureStore } from '@reduxjs/toolkit';\nimport { reducer } from './redux/gameStateSlice';\n\nconst store = configureStore({\n  reducer,\n});\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}